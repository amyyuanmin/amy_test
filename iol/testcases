#This isn't intended as a standalone bash script intended to be run directly. this is a list of commands for a python script.
#iolinteract.py runs through each command and executes while parsing results and process generated logs
#version is the version of runtnvme.
#device is the file path to soc being tested
#runtnvme is the iolinteract script it takes the test number, device to test and version to test
#
# Some IOL tests directly call tnvme tests, but tnvme test groups must be arranged independently.
# In this case, some tnvme tests can be called twice. Possible duplication of IoL and tnvme tests is intentional.
# Although this approach increases IoL testing stage time, it defends against IoL tests implementation change
# and allows not to lose tnvme tests coverage in this case.
#
version=1.3
device=/dev/nvme0

# IOL Group 1.1 Identify Command Set
sudo ./runtest.sh --test=1.1.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.1.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.1.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.1.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.1.5 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.1.6 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.1.9 --device="$device" -v "$version"

# IOL Group 1.2 Set/Get Features
sudo ./runtest.sh --test=1.2.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.2.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.2.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.2.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.2.5 --device="$device" -v "$version"

# IOL Group 1.3 Get Log Page
sudo ./runtest.sh --test=1.3.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.5 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.6 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.7 --device="$device" -v "$version" --block=4096
sudo ./runtest.sh --test=1.3.8 --device="$device" -v "$version" --block=4096
# Not currently supported in the PC edition (ver. 12a)
# sudo ./runtest.sh --test=1.3.9 --device="$device" -v "$version"
# Not currently supported in the PC edition (ver. 12a). This test is marked as FYI not IP.
# sudo ./runtest.sh --test=1.3.10 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.11 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.12 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.13 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.14 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.3.15 --device="$device" -v "$version"

# IOL Group 1.4 Create/Delete IO Submission and Completion Queues
# Tests in group 1.4 pass IoL GUI application but can't be called by commands below,
# use correspondin tnvme tests from groups 14, 15, 16, 17 instead
#sudo ./runtest.sh --test=1.4.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.3 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.4 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.5 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.6 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.7 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.8 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.9 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.4.10 --device="$device" -v "$version"

# IOL Group 1.5 Abort Command
# Test 1.5.1 passes IoL GUI application but can't be called by the command below,
# use tnvme tests 33.0.0.0 and 33.2.0.0 that supposed to be called in IoL test 1.5.1
#sudo ./runtest.sh --test=1.5.1 --device="$device" -v "$version"

# IOL Group 1.6 Format Command
sudo ./runtest.sh --test=1.6.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.6.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.6.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.6.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.6.5 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.6.6 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.6.7 --device="$device" -v "$version"

# IOL Group 1.7 AER
# There is no file for this test in folder /LDD_Scripts/1.7
# Marked as 'Mandatory' IOL NVMe Conformance Test Plan v 10.0
#sudo ./runtest.sh --test=1.7.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.7.2 --device="$device" -v "$version"
# Not currently supported in the PC edition v 12.0a
#sudo ./runtest.sh --test=1.7.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.7.4 --device="$device" -v "$version"

# IOL Group 1.8 Get Feature Select
# Test 1.8.1 passes IoL GUI application but can't be called by the command below,
# use tnvme test 23.16.0.0 that supposed to be called in IoL test 1.8.1
#sudo ./runtest.sh --test=1.8.1 --device="$device" -v "$version"

# IOL Group 1.9 Feature Saved Across Reset
# Test 1.9.1 passes IoL GUI application but can't be called by the command below,
# use tnvme test 23.17.0.0 that supposed to be called in IoL test 1.9.1
#sudo ./runtest.sh --test=1.9.1 --device="$device" -v "$version"

# IOL Group 1.10 Device Self Test - Short operation
# Self test is an optional command that is not currently supported
# All tests in this group will be skipped if uncommented
#sudo ./runtest.sh --test=1.10.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.10.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.10.3 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.10.4 --device="$device" -v "$version"
#sudo ./runtest.sh --test=1.11.1 --device="$device" -v "$version"

# IOL Group 1.15 Directive Receive Identify
sudo ./runtest.sh --test=1.15.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.15.2 --device="$device" -v "$version"

# IOL Group 1.16 Directive Send Enable Directive
sudo ./runtest.sh --test=1.16.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.16.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=1.16.3 --device="$device" -v "$version"

# IOL Group 2.1 Compare NVM Command
# Compare command is not implemented yet
# All tests in this group will be skipped if uncommented
#sudo ./runtest.sh --test=2.1.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.1.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.1.3 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.1.4 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.1.5 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.1.6 --device="$device" -v "$version"

# IOL Group 2.2 Dataset Management
sudo ./runtest.sh --test=2.2.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.2.2 --device="$device" -v "$version" --block=4096
sudo ./runtest.sh --test=2.2.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.2.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.2.5 --device="$device" -v "$version"

# IOL Group 2.3 Read Command
sudo ./runtest.sh --test=2.3.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.5 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.6 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.7 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.8 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.9 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.3.10 --device="$device" -v "$version"
# Test fails, see DCFW-2707
#sudo ./runtest.sh --test=2.3.11 --device="$device" -v "$version"

# IOL Group 2.4 Write Command
sudo ./runtest.sh --test=2.4.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.5 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.6 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.7 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.8 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.9 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.4.10 --device="$device" -v "$version"
# Test fails. The same issue as in 2.3.11 (6:0.13.0), see DCFW-2707
#sudo ./runtest.sh --test=2.4.11 --device="$device" -v "$version"

# IOL Group 2.5 Write Uncorrectable Command
# Write uncorrectable command is optional and not implemented yet
# All tests in this group will be skipped if uncommented
#sudo ./runtest.sh --test=2.5.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.5.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.5.3 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.5.4 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.5.5 --device="$device" -v "$version"

# IOL Group 2.6 Flush Command
sudo ./runtest.sh --test=2.6.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=2.6.2 --device="$device" -v "$version"

# IOL Group 2.7 Write Zeroes Command
# We don't support Write Zeroes command (ONCS.WRITE_ZEROES_SUPPORT = 0)
# All tests in this group will be skipped if uncommented
#sudo ./runtest.sh --test=2.7.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.7.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.7.3 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.7.4 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.7.5 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.7.6 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.7.7 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.7.8 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.7.9 --device="$device" -v "$version"

# IOL Group 2.8 Atomicity Parameters
# We don't support atomic writes (NABSN = 0)
# Test will be skipped if uncommented
#sudo ./runtest.sh --test=2.8.1 --device="$device" -v "$version"

# IOL Group 2.9 AWUN/NAWUN
# All tests in this group fail. Other tests that passed before, may fail after this group of tests
#sudo ./runtest.sh --test=2.9.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=2.9.2 --device="$device" -v "$version"

# IOL Group 2.10 AWUN/NAWUN
# Not currently supported in the PC edition
#sudo ./runtest.sh --test=2.10.1 --device="$device" -v "$version"

# IOL Group 3 NVM Features
# Tests 3.1.1-3.2.2 pass IoL GUI application but can't be called by the command below,
# use corresponding tnvme tests instead
#sudo ./runtest.sh --test=3.1.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=3.1.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=3.2.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=3.2.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=3.3.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=3.3.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=3.3.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=3.3.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=3.3.5 --device="$device" -v "$version"
# We do not support Host Memory Buffer (HMPRE = 0), test is skipped
#sudo ./runtest.sh --test=3.4.1 --device="$device" -v "$version"
# Not currently supported in the PC edition
#sudo ./runtest.sh --test=3.5.1 --device="$device" -v "$version"

# IOL Group 4 Controller Registers
sudo ./runtest.sh --test=4.1.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.2.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.3.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.4.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.5.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.6.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.7.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.8.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.9.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.10.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.11.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.12.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.13.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.14.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.15.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.16.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.17.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=4.18.1 --device="$device" -v "$version"

# IOL Group 5 System Memory Structure
#   Test 5.2.1 and 5.4.1 verify MSI/MSI-X support.
#   However they can't run from the command line (only from GUI).
#   Internally they execute tnvme group 29 tests so we will run then manually below.
sudo ./runtest.sh --test=5.1.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=5.2.1 --device="$device" -v "$version"
# There is no file for this test in folder /LDD_Scripts/5.2
sudo ./runtest.sh --test=5.3.1 --device="$device" -v "$version"
# There is no file for this test in folder /LDD_Scripts/5.4
#sudo ./runtest.sh --test=5.4.1 --device="$device" -v "$version"

# Tests 5.5.1-5.5.7 pass IoL GUI application but can't be called by the command below,
# use corresponding tnvme tests instead
#sudo ./runtest.sh --test=5.5.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=5.5.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=5.5.3 --device="$device" -v "$version"
#sudo ./runtest.sh --test=5.5.4 --device="$device" -v "$version"
#sudo ./runtest.sh --test=5.5.5 --device="$device" -v "$version"
#sudo ./runtest.sh --test=5.5.6 --device="$device" -v "$version"
#sudo ./runtest.sh --test=5.5.7 --device="$device" -v "$version"
# Test fails when called by command below and in IoL GUI application
#sudo ./runtest.sh --test=5.6.1 --device="$device" -v "$version"

# IOL Group 6 Controller Architecture
sudo ./runtest.sh --test=6.1.1 --device="$device" -v "$version"
# Not currently supported in PC edition
#sudo ./runtest.sh --test=6.2.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=6.3.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=6.4.1 --device="$device" -v "$version"

# IOL Group 7 Reservations
# Reservations feature is not supported yet
# Tests will be skipped if uncommented
#sudo ./runtest.sh --test=7.1.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.1.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.2.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.2.2 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.2.3 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.3.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.4.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.5.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.6.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.7.1 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7.8.1 --device="$device" -v "$version"

# IOL Group 8 Autonomous Power State Transitions
sudo ./runtest.sh --test=8.1.1 --device="$device" -v "$version"
# There is no file for this test in folder /LDD_Scripts/8.2
#sudo ./runtest.sh --test=8.2.1 --device="$device" -v "$version"
# There is no file for this test in folder /LDD_Scripts/8.3
#sudo ./runtest.sh --test=8.3.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=8.4.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=8.5.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=8.6.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=8.7.1 --device="$device" -v "$version"
# Not currently supported in the PC edition
#sudo ./runtest.sh --test=8.8.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=8.8.2 --device="$device" -v "$version"

# IOL Group 9 Namespace Management
sudo ./runtest.sh --test=9.1.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=9.1.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=9.1.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=9.1.4 --device="$device" -v "$version"
sudo ./runtest.sh --test=9.2.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=9.2.2 --device="$device" -v "$version"
sudo ./runtest.sh --test=9.2.3 --device="$device" -v "$version"
sudo ./runtest.sh --test=9.3.1 --device="$device" -v "$version"
sudo ./runtest.sh --test=9.3.2 --device="$device" -v "$version"

# IOL Group 10 PCI Express Capability Registers
# Test 10.1.1 passes IoL GUI application but can't be called by the command below,
# use tnvme tests 0:1.0.0 that supposed to be called in IoL test 10.1.1
#sudo ./runtest.sh --test=10.1.1 --device="$device" -v "$version"

# tnvme Group 0 PCIe registers
sudo ./runtest.sh --test=0:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=0:1.0.0 --device="$device" -v "$version"

# tnvme Group 1 Controller registers
#   The test expects to receive NVMe version 1.2 from the controller.
#   However, the controller already supports 1.3
#sudo ./runtest.sh --test=1:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:5.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:6.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:7.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:8.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:9.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:10.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:11.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:12.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:13.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:14.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:15.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:16.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:17.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=1:18.0.0 --device="$device" -v "$version"

# tnvme Group 2 Basic initialization
sudo ./runtest.sh --test=2:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:5.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:6.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:7.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:8.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:9.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:10.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:11.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=2:12.0.0 --device="$device" -v "$version"

# tnvme Group 3 Controller resets
sudo ./runtest.sh --test=3:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=3:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=3:2.0.0 --device="$device" -v "$version"
# From test notes: "This test is currently bugged and causes controller fatal status; should always be skipped."
sudo ./runtest.sh --test=3:3.0.0 --device="$device" -v "$version"
#   Tnvme is not able to detect if it has issued a subsystem reset correctly.
#   The test assumes that it failed to issue a subsytem reset, but actually it did issue the reset
#sudo ./runtest.sh --test=3:4.0.0 --device="$device" -v "$version"

# tnvme Group 4 General command tests
sudo ./runtest.sh --test=4:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=4:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=4:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=4:0.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=4:1.0.0 --device="$device" -v "$version"

# tnvme Group 5 Validate general queue functionality
sudo ./runtest.sh --test=5:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:5.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:5.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:5.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:5.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:5.4.0 --device="$device" -v "$version"
#   This test might fail. The test tries to fill up an IO sq and expects to receive all completions for them.
#   However, the timeout is too little and the controller sometimes is not able to finish all commands.
#sudo ./runtest.sh --test=5:5.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:5.6.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:5.7.0 --device="$device" -v "$version"
#  These two test are disabled, because it works incorrect in case when device declares supporting more than 42
#  queues (in CAP.MQES field). Test fills all SQ, only after that it starts to read CQ and do it not simultaneously
#  but in series. It leads to situation when all IO command indexes are occupied and device can't send CQE.
#  But these test are enabled for RAM drive, because it has SRIOV feature enabled, and device use only 8 queues for
#  physical controller (test will work).
#sudo ./runtest.sh --test=5:5.8.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=5:5.9.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=5:5.10.0 --device="$device" -v "$version"

# tnvme Group 6 NVME read commands
sudo ./runtest.sh --test=6:0.0.0 --device="$device" -v "$version"
#   fixed in DCFW-1761, but faced with tnvme-bug001
#sudo ./runtest.sh --test=6:0.1.0 --device="$device" -v "$version"
#   fixed in DCFW-1709, but faced with tnvme-bug002
#sudo ./runtest.sh --test=6:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:0.3.0 --device="$device" -v "$version"
#   tnvme-bug001
#sudo ./runtest.sh --test=6:0.4.0 --device="$device" -v "$version"
#   tnvme-bug001
#sudo ./runtest.sh --test=6:0.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:0.6.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:0.7.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:0.8.0 --device="$device" -v "$version"
#   The tests below send a read command with SLBA>=NSZE and NLB=0xFFFF and expect to receive
#   Invalid Field in Command error. The commands fail to complete for multiple reasons:
#        - SLBA is out of ns range (produce LBA out of range error)
#        - NLB exceeds the supported transfer size(produce Invalid field in command)
#   The tests expect to receive Invalid field error, however, the controller checks
#   if the command Lba range exceeds namespace size first. Thus the controller reports Lba is out of range error.
#sudo ./runtest.sh --test=6:0.9.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=6:0.10.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:0.11.0 --device="$device" -v "$version"
#   fixed in DCFW-1709, but faced with tnvme-bug002
#sudo ./runtest.sh --test=6:0.12.0 --device="$device" -v "$version"
#   need to investigate how to detect corrupted PRP
#sudo ./runtest.sh --test=6:0.13.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:0.14.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:0.15.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=6:2.0.0 --device="$device" -v "$version"

# tnvme Group 7 NVME write commands
sudo ./runtest.sh --test=7:0.0.0 --device="$device" -v "$version"
#   fixed in DCFW-1761, but faced with tnvme-bug001
#sudo ./runtest.sh --test=7:0.1.0 --device="$device" -v "$version"
#   fixed in DCFW-1709, but faced with tnvme-bug002
#sudo ./runtest.sh --test=7:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=7:0.3.0 --device="$device" -v "$version"
#   tnvme-bug001
#sudo ./runtest.sh --test=7:0.4.0 --device="$device" -v "$version"
#   tnvme-bug001
#sudo ./runtest.sh --test=7:0.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=7:0.6.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=7:0.7.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=7:0.8.0 --device="$device" -v "$version"
#   The tests below send a read command with SLBA>=NSZE and NLB=0xFFFF and expect to receive
#   Invalid Field in Command error. The commands fail to complete for multiple reasons:
#        - SLBA is out of ns range (produce LBA out of range error)
#        - NLB exceeds the supported transfer size(produce Invalid field in command)
#   The tests expect to receive Invalid field error, however, the controller checks
#   if the command Lba range exceeds namespace size first. Thus the controller reports Lba is out of range error.
#sudo ./runtest.sh --test=7:0.9.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=7:0.10.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=7:0.11.0 --device="$device" -v "$version"
#   fixed in DCFW-1709, but faced with tnvme-bug002
#sudo ./runtest.sh --test=7:0.12.0 --device="$device" -v "$version"
#   need to investigate how to detect corrupted PRP
#sudo ./runtest.sh --test=7:0.13.0 --device="$device" -v "$version"
#   test 7:0.14.0 fails inside whole tests set, but passes inside group 7
#sudo ./runtest.sh --test=7:0.14.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=7:0.15.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=7:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=7:2.0.0 --device="$device" -v "$version"

# tnvme Group 8: GrpNVMWriteReadCombo NVM cmd set write/read combo tests.
#    The tests below require at least two MSI IRQ. The VT-d for Intel CPU
#    (or AMD-Vi) should be enabled in BIOS to allow Linux to use multiple MSI
#    on test machine.
#    If any of the prior tnvme tests enabled single MSI the dnvme driver
#    will incorrectly identify number of supported MSIs.
#    To workaround this defect we can load standard NVMe driver that enables
#    multiple MSIs (usually 4 out of 32) and then run the whole group.
#    To reload the driver we can execute any IOL test.
sudo ./runtest.sh --test=1.1.2 --device="$device" -v "$version"

#    Also one of the tests requires a namespace
#    In different configurations we may or may not have a namespace.
#    Make sure we always have a namespace
sudo nvme delete-ns /dev/nvme0 -n 0xffffffff
sudo nvme create-ns /dev/nvme0 -s 32000 -c 32000 -f0 -d0 -m0
sudo nvme attach-ns /dev/nvme0 -c 0 -n 1
sudo nvme ns-rescan /dev/nvme0

sudo ./runtest.sh --test=8:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.4.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.6.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.7.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:3.8.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:5.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=8:6.0.0 --device="$device" -v "$version"

# tnvme Group 10 Interrupts
sudo ./runtest.sh --test=10:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=10:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=10:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=10:0.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=10:0.4.0 --device="$device" -v "$version"

# tnvme Group 12 NVMe Data Set Management
sudo ./runtest.sh --test=12:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.4.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.6.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.7.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.8.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.9.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=12:0.10.0 --device="$device" -v "$version"

# tnvme Group 14 Create/Delete CQ
sudo ./runtest.sh --test=14:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=14:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=14:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=14:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=14:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=14:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=14:5.0.0 --device="$device" -v "$version"

# tnvme Group 15 Create/Delete SQ
sudo ./runtest.sh --test=15:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=15:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=15:1.0.0 --device="$device" -v "$version"

# tnvme Group 16 Create CQ
sudo ./runtest.sh --test=16:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=16:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=16:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=16:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=16:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=16:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=16:5.0.0 --device="$device" -v "$version"

# tnvme Group 17 Create SQ
sudo ./runtest.sh --test=17:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:0.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:5.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=17:6.0.0 --device="$device" -v "$version"

# tnvme Group 18 Create SQ/CQ
sudo ./runtest.sh --test=18:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=18:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=18:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=18:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=18:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=18:5.0.0 --device="$device" -v "$version"

# tnvme Group 19 Get/Set log page
sudo ./runtest.sh --test=19:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.2.0 --device="$device" -v "$version"
#   The commented tests below are run for the NVMe version 1.2 only.
#   These tests are not compatible with NVMe version 1.3 since there were
#   changes in the list of the reserved Log page identifiers(LID)
#sudo ./runtest.sh --test=19:0.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.4.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=19:0.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.6.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.7.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.8.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.9.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.10.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.11.0 --device="$device" -v "$version"
#   This test takes too much time to complete
#sudo ./runtest.sh --test=19:0.12.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.13.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.14.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.15.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=19:0.16.0 --device="$device" -v "$version"

# tnvme Group 20 Identify
sudo ./runtest.sh --test=20:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=20:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=20:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=20:0.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=20:0.4.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=20:0.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=20:0.6.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=20:0.7.0 --device="$device" -v "$version"
#   This test assumes that a controller with controller id=1 exists. However, it does not.
#   A default controller id for the physical controller is 0 and it is a valid value according to
#   Figure 108: Identify - Command Dword 10 in NVM-Express 1.3a
#sudo ./runtest.sh --test=20:0.8.0 --device="$device" -v "$version"
#   This test actually checks if the controller returns an error on reserved CNS values
#   and if reserved fields are zeroed.
#   CNS values are taken from NVMe spec 1.2.1. New CNS values were introduced in the version 1.3
#   Thus test fails since the controller supports ver 1.3
#sudo ./runtest.sh --test=20:0.9.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=20:0.10.0 --device="$device" -v "$version"

# tnvme Group 21 Set Features
#   Test is run for the NVMe version 1.2 only. This tests is not compatible with NVMe version 1.3
#   since there were changes in the list of the features ids (FID). Next test needs a reboot
#sudo ./runtest.sh --test=21:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=21:1.0.0 --device="$device" -v "$version"
#   Test is run for the NVMe version 1.2 only. This tests is not compatible with NVMe version 1.3
#   since the test is trying to set FID as 0x0E. And it is a valid value for NVMe 1.3. Next test needs reboot
#sudo ./runtest.sh --test=21:2.0.0 --device="$device" -v "$version"

# tnvme Group 22 Get Features
sudo ./runtest.sh --test=22:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=22:0.1.0 --device="$device" -v "$version"
#   Test is run for the NVMe version 1.2 only. This tests is not compatible with NVMe version 1.3
#   since the test is trying to set FID as 0x0E which is a valid value for NVMe 1.3
#sudo ./runtest.sh --test=22:0.2.0 --device="$device" -v "$version"

# tnvme Group 23 Set/Get Features Combo
sudo ./runtest.sh --test=23:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:3.0.0 --device="$device" -v "$version"
#   Volatile write cache is not supported yet
#sudo ./runtest.sh --test=23:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:5.0.0 --device="$device" -v "$version"
#   Multi IRQs are not supported
#sudo ./runtest.sh --test=23:6.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:7.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:8.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:9.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:10.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:11.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:12.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:13.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:14.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:15.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:16.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=23:17.0.0 --device="$device" -v "$version"

# tnvme Group 24 Async request
# This test covers reserved fields. By default the framework skips such tests
# Can be enabled by adding -b(--rsvdfields) command line option
#sudo ./runtest.sh --test=24:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=24:1.0.0 --device="$device" -v "$version"
# This test is disabled because it duplicates test 24:5.0.0
#sudo ./runtest.sh --test=24:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=24:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=24:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=24:5.0.0 --device="$device" -v "$version"
# This test fails because it attempts to use the same buffer for
# error log and SMART log. SMART data size exceeds the buffer size
#sudo ./runtest.sh --test=24:6.0.0 --device="$device" -v "$version"

# tnvme Group 25 Reservations HOST-A
#   The controller reports that it does not support Reservation commands.
#   All tests are skipped
#sudo ./runtest.sh --test=25:0.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=25:0.1.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=25:0.2.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=25:0.3.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=25:0.4.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=25:0.5.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=25:0.6.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=25:0.7.0 --device="$device" -v "$version"

# tnvme Group 26 Reservations HOST-B
#   The controller reports that it does not support Reservation commands
#   for the second controller in dual port
#   All tests are skipped
#sudo ./runtest.sh --test=26:0.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=26:0.1.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=26:0.2.0 --device="$device" -v "$version"

# tnvme Group 27 Namespace Management
# This group is temporarily disabled because FTL can have outstanding write commands
# and delete namespace command can be a reason of assert. Enable when FTL handles this situation.
#sudo ./runtest.sh --test=27:0.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=27:0.1.0 --device="$device" -v "$version"
##   The tests below assume that the controller supports 512B LBA size, however, it does not.
##sudo ./runtest.sh --test=27:0.1.1 --device="$device" -v "$version"
##sudo ./runtest.sh --test=27:0.2.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=27:1.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=27:2.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=27:3.0.0 --device="$device" -v "$version"
##   This test is trying to create a NS of NSZE=0x200000. It is too big for Ramdrive.
##   Nevertheless it should pass for e2e.
##   Also it is not clear from the spec if the controller is able to change NSZE value during
##   a namespace creation/format operation. The controller allocates namespaces in AGUs and
##   it increases NSZE for a namespace to the number of blocks in one AGU
##sudo ./runtest.sh --test=27:4.0.0 --device="$device" -v "$version"
##   There is no created namespaces at the moment when test is run. The test should pass if there is one
##   If test 27:4.0.0 passes this test should pass also
##sudo ./runtest.sh --test=27:5.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=27:6.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=27:7.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=27:8.0.0 --device="$device" -v "$version"
##   Currently just skipped. It should pass if there is a created namespace
#sudo ./runtest.sh --test=27:9.0.0 --device="$device" -v "$version"

# tnvme Group 28 Nvme conformance group-3
sudo ./runtest.sh --test=28:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=28:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=28:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=28:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=28:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=28:5.0.0 --device="$device" -v "$version"

# tnvme Group 29 NVMe Conformance group-5
#   The tests below require at least two MSI IRQ. The VT-d for Intel CPU
# (or AMD-Vi) should be enabled in BIOS to allow Linux to use multiple MSI
# on test machine.
#   If any of the prior tnvme tests enabled single MSI the dnvme driver
# will incorrectly identify number of supported MSIs.
# To workaround this defect we can load standard NVMe driver that enables
# multiple MSIs (usually 4 out of 32) and then run the whole group.
# To reload the driver we can execute any IOL test.
# Also one of the tests requires a namespace
sudo ./runtest.sh --test=1.1.2 --device="$device" -v "$version"
# In different configurations we may or may not have a namespace.
# Make sure we always have a namespace
sudo nvme delete-ns /dev/nvme0 -n 0xffffffff
#    Following tnvme test 34:0.4.0 limits timeout for the format command based on
#    existing namespace size. The test expects 0.016 msec deallocate time per 1 GB.
#    We enlarge namespace size to increase the timeout for formats and pass this test.
sudo nvme create-ns /dev/nvme0 -s 200000000 -c 200000000 -f0 -d0 -m0
sudo nvme attach-ns /dev/nvme0 -c 0 -n 1
sudo nvme ns-rescan /dev/nvme0

sudo ./runtest.sh --test=29:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:0.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.4.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.6.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.7.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.8.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.9.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.10.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.11.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.12.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.13.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.14.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.15.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.16.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.17.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:1.18.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=29:2.1.0 --device="$device" -v "$version"

# tnvme Group 30 NVMe FW activate
sudo ./runtest.sh --test=30:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=30:0.1.0 --device="$device" -v "$version"

#tnvme Group 32 Debug-Retrieve device info
#   All the tests from this group are just informative.
sudo ./runtest.sh --test=32:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=32:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=32:2.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=32:3.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=32:4.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=32:5.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=32:6.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=32:7.0.0 --device="$device" -v "$version"

# tnvme Group 33 Abort
sudo ./runtest.sh --test=33:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=33:1.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=33:2.0.0 --device="$device" -v "$version"

# tnvme Group 34 NVME format
sudo ./runtest.sh --test=34:0.0.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=34:0.1.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=34:0.2.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=34:0.3.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=34:0.4.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=34:0.5.0 --device="$device" -v "$version"
sudo ./runtest.sh --test=34:0.6.0 --device="$device" -v "$version"

#tnvme Group 35 Reservation registration
#   The controller reports that it does not support Reservations registration
#sudo ./runtest.sh --test=35:0.0.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=35:0.1.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=35:0.2.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=35:0.3.0 --device="$device" -v "$version"
#sudo ./runtest.sh --test=35:0.4.0 --device="$device" -v "$version"